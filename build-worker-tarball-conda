#!/bin/bash

# Install a miniconda Python distribution
# and package it up in a tarball.

set -eu


realpath () {
    python -c "import os, sys; print(os.path.realpath(sys.argv[1]))" "$1"
}


if [[ -n ${_CONDOR_SCRATCH_DIR:-} ]]; then
	HOME=$_CONDOR_SCRATCH_DIR
	TMPDIR=${TMPDIR:-$_CONDOR_SCRATCH_DIR/tmp}
	mkdir -p "$TMPDIR"
	export HOME TMPDIR
fi

work_dir=$(mktemp -dt dask_condor_worker.XXXXXX)
# if not running under condor, clean up the work dir ourselves; otherwise,
# condor will do that for us on job removal, and for interactive jobs, we'd
# like to keep it for debugging
[[ -n ${_CONDOR_SCRATCH_DIR:-} ]] || trap 'rm -rf "$work_dir"' EXIT

if [[ $# -lt 2 ]]; then
    echo "Usage: $(basename $0) <source_url> <target_archive> [<extra_requirements_file>]"
    echo
    echo "<source_url>                  The URL to the miniconda installer"
    echo "<target_archive>              The path to write the worker tarball to."
    echo "<extra_requirements_file>     Python modules to install (in addition to"
    echo "                              dask.distributed and dependencies)."
    echo "                              (Optional)"
    exit 2
fi

miniconda_url=$1
python_target_archive=$(realpath "$2")
if [[ -n ${3-} ]]; then
    extra_requirements_file=$(realpath "$3")
else
    extra_requirements_file=
fi
miniconda_install_script=$(basename "$1")
python_install_dir=$work_dir/dask_condor_worker


# DEBUGGING
hostname -f || :
env | sort || :

set -x
cd "$work_dir"
wget -O "$miniconda_install_script" "$miniconda_url"
bash "$miniconda_install_script" -b -p "$python_install_dir"

PATH=$python_install_dir/bin:$PATH
export PATH

echo '*** Testing that Python got properly installed'
python - <<__end__
from distutils import sysconfig
print(sysconfig.PREFIX)

import ssl
print('ok')
__end__

echo '*** Downloading and installing dask.distributed'
conda install dask distributed numpy pandas

echo '*** Testing that dask.distributed got properly installed'
python - <<__end__
import dask, dask.array, dask.bag, dask.dataframe, distributed
print('ok')
__end__
which dask-worker

if [[ -n $extra_requirements_file ]]; then
    echo '*** Downloading and installing extra requirements'
    conda install --file "$extra_requirements_file"
fi

echo '*** Recording package list'
conda list | tee "$python_install_dir"/package-list.txt

echo '*** Making package relocatable'
# This generates a ton of output in trace mode so turn it off
set +x
find "$python_install_dir" -type f -print | while read filename; do
    # -I skips 'binary' files
    grep -qFI "$python_install_dir" "$filename" || continue
    sed -i -e "s|$python_install_dir|XXXINSTALLDIRXXX|g" "$filename"
done
set -x

cat - > "$python_install_dir"/fixpaths.sh <<'__end__'
#!/bin/bash
dir=$(dirname "$0")
dir_abs=$(python -c "import os, sys; print(os.path.realpath(sys.argv[1])))" "$dir")
find "$dir" -type f -print | while read filename; do
    grep -qFI "XXXINSTALLDIRXXX" "$filename" || continue
    sed -i -e "s|XXXINSTALLDIRXXX|$dir_abs|g" "$filename"
done
__end__
chmod +x "$python_install_dir"/fixpaths.sh

echo '*** Tarring up results'
cd "$work_dir"
tar czf "$python_target_archive" "$(basename "$python_install_dir")"
